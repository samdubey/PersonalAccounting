'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class XSchema
    Inherits DataSet
    
    Private tableReportData As ReportDataDataTable
    
    Private tableCompanyInfo As CompanyInfoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ReportData")) Is Nothing) Then
                Me.Tables.Add(New ReportDataDataTable(ds.Tables("ReportData")))
            End If
            If (Not (ds.Tables("CompanyInfo")) Is Nothing) Then
                Me.Tables.Add(New CompanyInfoDataTable(ds.Tables("CompanyInfo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReportData As ReportDataDataTable
        Get
            Return Me.tableReportData
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CompanyInfo As CompanyInfoDataTable
        Get
            Return Me.tableCompanyInfo
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As XSchema = CType(MyBase.Clone,XSchema)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ReportData")) Is Nothing) Then
            Me.Tables.Add(New ReportDataDataTable(ds.Tables("ReportData")))
        End If
        If (Not (ds.Tables("CompanyInfo")) Is Nothing) Then
            Me.Tables.Add(New CompanyInfoDataTable(ds.Tables("CompanyInfo")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableReportData = CType(Me.Tables("ReportData"),ReportDataDataTable)
        If (Not (Me.tableReportData) Is Nothing) Then
            Me.tableReportData.InitVars
        End If
        Me.tableCompanyInfo = CType(Me.Tables("CompanyInfo"),CompanyInfoDataTable)
        If (Not (Me.tableCompanyInfo) Is Nothing) Then
            Me.tableCompanyInfo.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "XSchema"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/XSchema.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableReportData = New ReportDataDataTable
        Me.Tables.Add(Me.tableReportData)
        Me.tableCompanyInfo = New CompanyInfoDataTable
        Me.Tables.Add(Me.tableCompanyInfo)
    End Sub
    
    Private Function ShouldSerializeReportData() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCompanyInfo() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ReportDataRowChangeEventHandler(ByVal sender As Object, ByVal e As ReportDataRowChangeEvent)
    
    Public Delegate Sub CompanyInfoRowChangeEventHandler(ByVal sender As Object, ByVal e As CompanyInfoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportDataDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnReportNumber As DataColumn
        
        Private columnReportName As DataColumn
        
        Private columnReportPath As DataColumn
        
        Private columnDataSource As DataColumn
        
        Private columnConnectionString As DataColumn
        
        Private columnReportParam As DataColumn
        
        Friend Sub New()
            MyBase.New("ReportData")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ReportNumberColumn As DataColumn
            Get
                Return Me.columnReportNumber
            End Get
        End Property
        
        Friend ReadOnly Property ReportNameColumn As DataColumn
            Get
                Return Me.columnReportName
            End Get
        End Property
        
        Friend ReadOnly Property ReportPathColumn As DataColumn
            Get
                Return Me.columnReportPath
            End Get
        End Property
        
        Friend ReadOnly Property DataSourceColumn As DataColumn
            Get
                Return Me.columnDataSource
            End Get
        End Property
        
        Friend ReadOnly Property ConnectionStringColumn As DataColumn
            Get
                Return Me.columnConnectionString
            End Get
        End Property
        
        Friend ReadOnly Property ReportParamColumn As DataColumn
            Get
                Return Me.columnReportParam
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReportDataRow
            Get
                Return CType(Me.Rows(index),ReportDataRow)
            End Get
        End Property
        
        Public Event ReportDataRowChanged As ReportDataRowChangeEventHandler
        
        Public Event ReportDataRowChanging As ReportDataRowChangeEventHandler
        
        Public Event ReportDataRowDeleted As ReportDataRowChangeEventHandler
        
        Public Event ReportDataRowDeleting As ReportDataRowChangeEventHandler
        
        Public Overloads Sub AddReportDataRow(ByVal row As ReportDataRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReportDataRow(ByVal ReportNumber As Short, ByVal ReportName As String, ByVal ReportPath As String, ByVal DataSource As String, ByVal ConnectionString As String, ByVal ReportParam As String) As ReportDataRow
            Dim rowReportDataRow As ReportDataRow = CType(Me.NewRow,ReportDataRow)
            rowReportDataRow.ItemArray = New Object() {ReportNumber, ReportName, ReportPath, DataSource, ConnectionString, ReportParam}
            Me.Rows.Add(rowReportDataRow)
            Return rowReportDataRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReportDataDataTable = CType(MyBase.Clone,ReportDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReportDataDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnReportNumber = Me.Columns("ReportNumber")
            Me.columnReportName = Me.Columns("ReportName")
            Me.columnReportPath = Me.Columns("ReportPath")
            Me.columnDataSource = Me.Columns("DataSource")
            Me.columnConnectionString = Me.Columns("ConnectionString")
            Me.columnReportParam = Me.Columns("ReportParam")
        End Sub
        
        Private Sub InitClass()
            Me.columnReportNumber = New DataColumn("ReportNumber", GetType(System.Int16), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnReportNumber)
            Me.columnReportName = New DataColumn("ReportName", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnReportName)
            Me.columnReportPath = New DataColumn("ReportPath", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnReportPath)
            Me.columnDataSource = New DataColumn("DataSource", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDataSource)
            Me.columnConnectionString = New DataColumn("ConnectionString", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnConnectionString)
            Me.columnReportParam = New DataColumn("ReportParam", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnReportParam)
            Me.columnReportNumber.Namespace = ""
            Me.columnReportName.Namespace = ""
            Me.columnReportPath.Namespace = ""
            Me.columnDataSource.Namespace = ""
            Me.columnConnectionString.Namespace = ""
            Me.columnReportParam.Namespace = ""
        End Sub
        
        Public Function NewReportDataRow() As ReportDataRow
            Return CType(Me.NewRow,ReportDataRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReportDataRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReportDataRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReportDataRowChangedEvent) Is Nothing) Then
                RaiseEvent ReportDataRowChanged(Me, New ReportDataRowChangeEvent(CType(e.Row,ReportDataRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReportDataRowChangingEvent) Is Nothing) Then
                RaiseEvent ReportDataRowChanging(Me, New ReportDataRowChangeEvent(CType(e.Row,ReportDataRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReportDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReportDataRowDeleted(Me, New ReportDataRowChangeEvent(CType(e.Row,ReportDataRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReportDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReportDataRowDeleting(Me, New ReportDataRowChangeEvent(CType(e.Row,ReportDataRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReportDataRow(ByVal row As ReportDataRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportDataRow
        Inherits DataRow
        
        Private tableReportData As ReportDataDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReportData = CType(Me.Table,ReportDataDataTable)
        End Sub
        
        Public Property ReportNumber As Short
            Get
                Try 
                    Return CType(Me(Me.tableReportData.ReportNumberColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportData.ReportNumberColumn) = value
            End Set
        End Property
        
        Public Property ReportName As String
            Get
                Try 
                    Return CType(Me(Me.tableReportData.ReportNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportData.ReportNameColumn) = value
            End Set
        End Property
        
        Public Property ReportPath As String
            Get
                Try 
                    Return CType(Me(Me.tableReportData.ReportPathColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportData.ReportPathColumn) = value
            End Set
        End Property
        
        Public Property DataSource As String
            Get
                Try 
                    Return CType(Me(Me.tableReportData.DataSourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportData.DataSourceColumn) = value
            End Set
        End Property
        
        Public Property ConnectionString As String
            Get
                Try 
                    Return CType(Me(Me.tableReportData.ConnectionStringColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportData.ConnectionStringColumn) = value
            End Set
        End Property
        
        Public Property ReportParam As String
            Get
                Try 
                    Return CType(Me(Me.tableReportData.ReportParamColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportData.ReportParamColumn) = value
            End Set
        End Property
        
        Public Function IsReportNumberNull() As Boolean
            Return Me.IsNull(Me.tableReportData.ReportNumberColumn)
        End Function
        
        Public Sub SetReportNumberNull()
            Me(Me.tableReportData.ReportNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReportNameNull() As Boolean
            Return Me.IsNull(Me.tableReportData.ReportNameColumn)
        End Function
        
        Public Sub SetReportNameNull()
            Me(Me.tableReportData.ReportNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReportPathNull() As Boolean
            Return Me.IsNull(Me.tableReportData.ReportPathColumn)
        End Function
        
        Public Sub SetReportPathNull()
            Me(Me.tableReportData.ReportPathColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataSourceNull() As Boolean
            Return Me.IsNull(Me.tableReportData.DataSourceColumn)
        End Function
        
        Public Sub SetDataSourceNull()
            Me(Me.tableReportData.DataSourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConnectionStringNull() As Boolean
            Return Me.IsNull(Me.tableReportData.ConnectionStringColumn)
        End Function
        
        Public Sub SetConnectionStringNull()
            Me(Me.tableReportData.ConnectionStringColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReportParamNull() As Boolean
            Return Me.IsNull(Me.tableReportData.ReportParamColumn)
        End Function
        
        Public Sub SetReportParamNull()
            Me(Me.tableReportData.ReportParamColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportDataRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReportDataRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReportDataRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReportDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CompanyInfoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCompanyName As DataColumn
        
        Private columnCompanyAddress As DataColumn
        
        Private columnCity As DataColumn
        
        Private columnPincode As DataColumn
        
        Private columnPhoneR As DataColumn
        
        Private columnPhoneO As DataColumn
        
        Private columnCompanyCode As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnWebSite As DataColumn
        
        Private columnPANNo As DataColumn
        
        Private columnTINNo As DataColumn
        
        Private columnTANNo As DataColumn
        
        Private columnKeyPerson As DataColumn
        
        Private columnFromDate As DataColumn
        
        Private columnToDate As DataColumn
        
        Private columnADBPath As DataColumn
        
        Private columnRDBPath As DataColumn
        
        Private columnDBName As DataColumn
        
        Private columnShortName As DataColumn
        
        Friend Sub New()
            MyBase.New("CompanyInfo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CompanyNameColumn As DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        Friend ReadOnly Property CompanyAddressColumn As DataColumn
            Get
                Return Me.columnCompanyAddress
            End Get
        End Property
        
        Friend ReadOnly Property CityColumn As DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Friend ReadOnly Property PincodeColumn As DataColumn
            Get
                Return Me.columnPincode
            End Get
        End Property
        
        Friend ReadOnly Property PhoneRColumn As DataColumn
            Get
                Return Me.columnPhoneR
            End Get
        End Property
        
        Friend ReadOnly Property PhoneOColumn As DataColumn
            Get
                Return Me.columnPhoneO
            End Get
        End Property
        
        Friend ReadOnly Property CompanyCodeColumn As DataColumn
            Get
                Return Me.columnCompanyCode
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property WebSiteColumn As DataColumn
            Get
                Return Me.columnWebSite
            End Get
        End Property
        
        Friend ReadOnly Property PANNoColumn As DataColumn
            Get
                Return Me.columnPANNo
            End Get
        End Property
        
        Friend ReadOnly Property TINNoColumn As DataColumn
            Get
                Return Me.columnTINNo
            End Get
        End Property
        
        Friend ReadOnly Property TANNoColumn As DataColumn
            Get
                Return Me.columnTANNo
            End Get
        End Property
        
        Friend ReadOnly Property KeyPersonColumn As DataColumn
            Get
                Return Me.columnKeyPerson
            End Get
        End Property
        
        Friend ReadOnly Property FromDateColumn As DataColumn
            Get
                Return Me.columnFromDate
            End Get
        End Property
        
        Friend ReadOnly Property ToDateColumn As DataColumn
            Get
                Return Me.columnToDate
            End Get
        End Property
        
        Friend ReadOnly Property ADBPathColumn As DataColumn
            Get
                Return Me.columnADBPath
            End Get
        End Property
        
        Friend ReadOnly Property RDBPathColumn As DataColumn
            Get
                Return Me.columnRDBPath
            End Get
        End Property
        
        Friend ReadOnly Property DBNameColumn As DataColumn
            Get
                Return Me.columnDBName
            End Get
        End Property
        
        Friend ReadOnly Property ShortNameColumn As DataColumn
            Get
                Return Me.columnShortName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CompanyInfoRow
            Get
                Return CType(Me.Rows(index),CompanyInfoRow)
            End Get
        End Property
        
        Public Event CompanyInfoRowChanged As CompanyInfoRowChangeEventHandler
        
        Public Event CompanyInfoRowChanging As CompanyInfoRowChangeEventHandler
        
        Public Event CompanyInfoRowDeleted As CompanyInfoRowChangeEventHandler
        
        Public Event CompanyInfoRowDeleting As CompanyInfoRowChangeEventHandler
        
        Public Overloads Sub AddCompanyInfoRow(ByVal row As CompanyInfoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCompanyInfoRow( _
                    ByVal CompanyName As String,  _
                    ByVal CompanyAddress As String,  _
                    ByVal City As String,  _
                    ByVal Pincode As System.UInt64,  _
                    ByVal PhoneR As System.UInt64,  _
                    ByVal PhoneO As System.UInt64,  _
                    ByVal CompanyCode As String,  _
                    ByVal Email As String,  _
                    ByVal WebSite As String,  _
                    ByVal PANNo As String,  _
                    ByVal TINNo As String,  _
                    ByVal TANNo As String,  _
                    ByVal KeyPerson As String,  _
                    ByVal FromDate As Date,  _
                    ByVal ToDate As Date,  _
                    ByVal ADBPath As String,  _
                    ByVal RDBPath As String,  _
                    ByVal DBName As String,  _
                    ByVal ShortName As String) As CompanyInfoRow
            Dim rowCompanyInfoRow As CompanyInfoRow = CType(Me.NewRow,CompanyInfoRow)
            rowCompanyInfoRow.ItemArray = New Object() {CompanyName, CompanyAddress, City, Pincode, PhoneR, PhoneO, CompanyCode, Email, WebSite, PANNo, TINNo, TANNo, KeyPerson, FromDate, ToDate, ADBPath, RDBPath, DBName, ShortName}
            Me.Rows.Add(rowCompanyInfoRow)
            Return rowCompanyInfoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CompanyInfoDataTable = CType(MyBase.Clone,CompanyInfoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CompanyInfoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCompanyName = Me.Columns("CompanyName")
            Me.columnCompanyAddress = Me.Columns("CompanyAddress")
            Me.columnCity = Me.Columns("City")
            Me.columnPincode = Me.Columns("Pincode")
            Me.columnPhoneR = Me.Columns("PhoneR")
            Me.columnPhoneO = Me.Columns("PhoneO")
            Me.columnCompanyCode = Me.Columns("CompanyCode")
            Me.columnEmail = Me.Columns("Email")
            Me.columnWebSite = Me.Columns("WebSite")
            Me.columnPANNo = Me.Columns("PANNo")
            Me.columnTINNo = Me.Columns("TINNo")
            Me.columnTANNo = Me.Columns("TANNo")
            Me.columnKeyPerson = Me.Columns("KeyPerson")
            Me.columnFromDate = Me.Columns("FromDate")
            Me.columnToDate = Me.Columns("ToDate")
            Me.columnADBPath = Me.Columns("ADBPath")
            Me.columnRDBPath = Me.Columns("RDBPath")
            Me.columnDBName = Me.Columns("DBName")
            Me.columnShortName = Me.Columns("ShortName")
        End Sub
        
        Private Sub InitClass()
            Me.columnCompanyName = New DataColumn("CompanyName", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnCompanyName)
            Me.columnCompanyAddress = New DataColumn("CompanyAddress", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnCompanyAddress)
            Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnCity)
            Me.columnPincode = New DataColumn("Pincode", GetType(System.UInt64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnPincode)
            Me.columnPhoneR = New DataColumn("PhoneR", GetType(System.UInt64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnPhoneR)
            Me.columnPhoneO = New DataColumn("PhoneO", GetType(System.UInt64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnPhoneO)
            Me.columnCompanyCode = New DataColumn("CompanyCode", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnCompanyCode)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnEmail)
            Me.columnWebSite = New DataColumn("WebSite", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnWebSite)
            Me.columnPANNo = New DataColumn("PANNo", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnPANNo)
            Me.columnTINNo = New DataColumn("TINNo", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnTINNo)
            Me.columnTANNo = New DataColumn("TANNo", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnTANNo)
            Me.columnKeyPerson = New DataColumn("KeyPerson", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnKeyPerson)
            Me.columnFromDate = New DataColumn("FromDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnFromDate)
            Me.columnToDate = New DataColumn("ToDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnToDate)
            Me.columnADBPath = New DataColumn("ADBPath", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnADBPath)
            Me.columnRDBPath = New DataColumn("RDBPath", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnRDBPath)
            Me.columnDBName = New DataColumn("DBName", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDBName)
            Me.columnShortName = New DataColumn("ShortName", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnShortName)
            Me.columnCompanyName.AllowDBNull = false
            Me.columnCompanyName.Namespace = ""
            Me.columnCompanyAddress.Namespace = ""
            Me.columnCity.Namespace = ""
            Me.columnPincode.Namespace = ""
            Me.columnPhoneR.Namespace = ""
            Me.columnPhoneO.Namespace = ""
            Me.columnCompanyCode.Namespace = ""
            Me.columnEmail.Namespace = ""
            Me.columnWebSite.Namespace = ""
            Me.columnPANNo.Namespace = ""
            Me.columnTINNo.Namespace = ""
            Me.columnTANNo.Namespace = ""
            Me.columnKeyPerson.Namespace = ""
            Me.columnFromDate.Namespace = ""
            Me.columnToDate.Namespace = ""
            Me.columnADBPath.Namespace = ""
            Me.columnRDBPath.Namespace = ""
            Me.columnDBName.Namespace = ""
            Me.columnShortName.Namespace = ""
        End Sub
        
        Public Function NewCompanyInfoRow() As CompanyInfoRow
            Return CType(Me.NewRow,CompanyInfoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CompanyInfoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CompanyInfoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CompanyInfoRowChangedEvent) Is Nothing) Then
                RaiseEvent CompanyInfoRowChanged(Me, New CompanyInfoRowChangeEvent(CType(e.Row,CompanyInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CompanyInfoRowChangingEvent) Is Nothing) Then
                RaiseEvent CompanyInfoRowChanging(Me, New CompanyInfoRowChangeEvent(CType(e.Row,CompanyInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CompanyInfoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CompanyInfoRowDeleted(Me, New CompanyInfoRowChangeEvent(CType(e.Row,CompanyInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CompanyInfoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CompanyInfoRowDeleting(Me, New CompanyInfoRowChangeEvent(CType(e.Row,CompanyInfoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCompanyInfoRow(ByVal row As CompanyInfoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CompanyInfoRow
        Inherits DataRow
        
        Private tableCompanyInfo As CompanyInfoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompanyInfo = CType(Me.Table,CompanyInfoDataTable)
        End Sub
        
        Public Property CompanyName As String
            Get
                Return CType(Me(Me.tableCompanyInfo.CompanyNameColumn),String)
            End Get
            Set
                Me(Me.tableCompanyInfo.CompanyNameColumn) = value
            End Set
        End Property
        
        Public Property CompanyAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.CompanyAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.CompanyAddressColumn) = value
            End Set
        End Property
        
        Public Property City As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.CityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.CityColumn) = value
            End Set
        End Property
        
        Public Property Pincode As System.UInt64
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.PincodeColumn),System.UInt64)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.PincodeColumn) = value
            End Set
        End Property
        
        Public Property PhoneR As System.UInt64
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.PhoneRColumn),System.UInt64)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.PhoneRColumn) = value
            End Set
        End Property
        
        Public Property PhoneO As System.UInt64
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.PhoneOColumn),System.UInt64)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.PhoneOColumn) = value
            End Set
        End Property
        
        Public Property CompanyCode As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.CompanyCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.CompanyCodeColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.EmailColumn) = value
            End Set
        End Property
        
        Public Property WebSite As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.WebSiteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.WebSiteColumn) = value
            End Set
        End Property
        
        Public Property PANNo As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.PANNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.PANNoColumn) = value
            End Set
        End Property
        
        Public Property TINNo As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.TINNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.TINNoColumn) = value
            End Set
        End Property
        
        Public Property TANNo As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.TANNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.TANNoColumn) = value
            End Set
        End Property
        
        Public Property KeyPerson As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.KeyPersonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.KeyPersonColumn) = value
            End Set
        End Property
        
        Public Property FromDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.FromDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.FromDateColumn) = value
            End Set
        End Property
        
        Public Property ToDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.ToDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.ToDateColumn) = value
            End Set
        End Property
        
        Public Property ADBPath As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.ADBPathColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.ADBPathColumn) = value
            End Set
        End Property
        
        Public Property RDBPath As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.RDBPathColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.RDBPathColumn) = value
            End Set
        End Property
        
        Public Property DBName As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.DBNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.DBNameColumn) = value
            End Set
        End Property
        
        Public Property ShortName As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyInfo.ShortNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyInfo.ShortNameColumn) = value
            End Set
        End Property
        
        Public Function IsCompanyAddressNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.CompanyAddressColumn)
        End Function
        
        Public Sub SetCompanyAddressNull()
            Me(Me.tableCompanyInfo.CompanyAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tableCompanyInfo.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPincodeNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.PincodeColumn)
        End Function
        
        Public Sub SetPincodeNull()
            Me(Me.tableCompanyInfo.PincodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneRNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.PhoneRColumn)
        End Function
        
        Public Sub SetPhoneRNull()
            Me(Me.tableCompanyInfo.PhoneRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneONull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.PhoneOColumn)
        End Function
        
        Public Sub SetPhoneONull()
            Me(Me.tableCompanyInfo.PhoneOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyCodeNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.CompanyCodeColumn)
        End Function
        
        Public Sub SetCompanyCodeNull()
            Me(Me.tableCompanyInfo.CompanyCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tableCompanyInfo.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWebSiteNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.WebSiteColumn)
        End Function
        
        Public Sub SetWebSiteNull()
            Me(Me.tableCompanyInfo.WebSiteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPANNoNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.PANNoColumn)
        End Function
        
        Public Sub SetPANNoNull()
            Me(Me.tableCompanyInfo.PANNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTINNoNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.TINNoColumn)
        End Function
        
        Public Sub SetTINNoNull()
            Me(Me.tableCompanyInfo.TINNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTANNoNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.TANNoColumn)
        End Function
        
        Public Sub SetTANNoNull()
            Me(Me.tableCompanyInfo.TANNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeyPersonNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.KeyPersonColumn)
        End Function
        
        Public Sub SetKeyPersonNull()
            Me(Me.tableCompanyInfo.KeyPersonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFromDateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.FromDateColumn)
        End Function
        
        Public Sub SetFromDateNull()
            Me(Me.tableCompanyInfo.FromDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToDateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.ToDateColumn)
        End Function
        
        Public Sub SetToDateNull()
            Me(Me.tableCompanyInfo.ToDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADBPathNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.ADBPathColumn)
        End Function
        
        Public Sub SetADBPathNull()
            Me(Me.tableCompanyInfo.ADBPathColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRDBPathNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.RDBPathColumn)
        End Function
        
        Public Sub SetRDBPathNull()
            Me(Me.tableCompanyInfo.RDBPathColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDBNameNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.DBNameColumn)
        End Function
        
        Public Sub SetDBNameNull()
            Me(Me.tableCompanyInfo.DBNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShortNameNull() As Boolean
            Return Me.IsNull(Me.tableCompanyInfo.ShortNameColumn)
        End Function
        
        Public Sub SetShortNameNull()
            Me(Me.tableCompanyInfo.ShortNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CompanyInfoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CompanyInfoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CompanyInfoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CompanyInfoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
