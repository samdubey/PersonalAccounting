'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSet
    Inherits DataSet
    
    Private tableGLMast As GLMastDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GLMast")) Is Nothing) Then
                Me.Tables.Add(New GLMastDataTable(ds.Tables("GLMast")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GLMast As GLMastDataTable
        Get
            Return Me.tableGLMast
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSet = CType(MyBase.Clone,DSet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GLMast")) Is Nothing) Then
            Me.Tables.Add(New GLMastDataTable(ds.Tables("GLMast")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGLMast = CType(Me.Tables("GLMast"),GLMastDataTable)
        If (Not (Me.tableGLMast) Is Nothing) Then
            Me.tableGLMast.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSet"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSet.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGLMast = New GLMastDataTable
        Me.Tables.Add(Me.tableGLMast)
    End Sub
    
    Private Function ShouldSerializeGLMast() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GLMastRowChangeEventHandler(ByVal sender As Object, ByVal e As GLMastRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GLMastDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAdd1 As DataColumn
        
        Private columnAdd2 As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnBkDate As DataColumn
        
        Private columnCity As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnFax As DataColumn
        
        Private columnGLcode As DataColumn
        
        Private columnGName As DataColumn
        
        Private columnIndCode As DataColumn
        
        Private columnMobile As DataColumn
        
        Private columnPAN As DataColumn
        
        Private columnPart As DataColumn
        
        Private columnPhO As DataColumn
        
        Private columnPhR As DataColumn
        
        Private columnPin As DataColumn
        
        Private columnSite As DataColumn
        
        Private columnTIN As DataColumn
        
        Private columnUserID As DataColumn
        
        Friend Sub New()
            MyBase.New("GLMast")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Add1Column As DataColumn
            Get
                Return Me.columnAdd1
            End Get
        End Property
        
        Friend ReadOnly Property Add2Column As DataColumn
            Get
                Return Me.columnAdd2
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property BkDateColumn As DataColumn
            Get
                Return Me.columnBkDate
            End Get
        End Property
        
        Friend ReadOnly Property CityColumn As DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property FaxColumn As DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        Friend ReadOnly Property GLcodeColumn As DataColumn
            Get
                Return Me.columnGLcode
            End Get
        End Property
        
        Friend ReadOnly Property GNameColumn As DataColumn
            Get
                Return Me.columnGName
            End Get
        End Property
        
        Friend ReadOnly Property IndCodeColumn As DataColumn
            Get
                Return Me.columnIndCode
            End Get
        End Property
        
        Friend ReadOnly Property MobileColumn As DataColumn
            Get
                Return Me.columnMobile
            End Get
        End Property
        
        Friend ReadOnly Property PANColumn As DataColumn
            Get
                Return Me.columnPAN
            End Get
        End Property
        
        Friend ReadOnly Property PartColumn As DataColumn
            Get
                Return Me.columnPart
            End Get
        End Property
        
        Friend ReadOnly Property PhOColumn As DataColumn
            Get
                Return Me.columnPhO
            End Get
        End Property
        
        Friend ReadOnly Property PhRColumn As DataColumn
            Get
                Return Me.columnPhR
            End Get
        End Property
        
        Friend ReadOnly Property PinColumn As DataColumn
            Get
                Return Me.columnPin
            End Get
        End Property
        
        Friend ReadOnly Property SiteColumn As DataColumn
            Get
                Return Me.columnSite
            End Get
        End Property
        
        Friend ReadOnly Property TINColumn As DataColumn
            Get
                Return Me.columnTIN
            End Get
        End Property
        
        Friend ReadOnly Property UserIDColumn As DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GLMastRow
            Get
                Return CType(Me.Rows(index),GLMastRow)
            End Get
        End Property
        
        Public Event GLMastRowChanged As GLMastRowChangeEventHandler
        
        Public Event GLMastRowChanging As GLMastRowChangeEventHandler
        
        Public Event GLMastRowDeleted As GLMastRowChangeEventHandler
        
        Public Event GLMastRowDeleting As GLMastRowChangeEventHandler
        
        Public Overloads Sub AddGLMastRow(ByVal row As GLMastRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGLMastRow( _
                    ByVal Add1 As String,  _
                    ByVal Add2 As String,  _
                    ByVal Amount As Double,  _
                    ByVal BkDate As Date,  _
                    ByVal City As String,  _
                    ByVal Email As String,  _
                    ByVal Fax As String,  _
                    ByVal GLcode As Integer,  _
                    ByVal GName As String,  _
                    ByVal IndCode As String,  _
                    ByVal Mobile As String,  _
                    ByVal PAN As String,  _
                    ByVal Part As String,  _
                    ByVal PhO As String,  _
                    ByVal PhR As String,  _
                    ByVal Pin As String,  _
                    ByVal Site As String,  _
                    ByVal TIN As String,  _
                    ByVal UserID As String) As GLMastRow
            Dim rowGLMastRow As GLMastRow = CType(Me.NewRow,GLMastRow)
            rowGLMastRow.ItemArray = New Object() {Add1, Add2, Amount, BkDate, City, Email, Fax, GLcode, GName, IndCode, Mobile, PAN, Part, PhO, PhR, Pin, Site, TIN, UserID}
            Me.Rows.Add(rowGLMastRow)
            Return rowGLMastRow
        End Function
        
        Public Function FindByGLcode(ByVal GLcode As Integer) As GLMastRow
            Return CType(Me.Rows.Find(New Object() {GLcode}),GLMastRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GLMastDataTable = CType(MyBase.Clone,GLMastDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GLMastDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAdd1 = Me.Columns("Add1")
            Me.columnAdd2 = Me.Columns("Add2")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnBkDate = Me.Columns("BkDate")
            Me.columnCity = Me.Columns("City")
            Me.columnEmail = Me.Columns("Email")
            Me.columnFax = Me.Columns("Fax")
            Me.columnGLcode = Me.Columns("GLcode")
            Me.columnGName = Me.Columns("GName")
            Me.columnIndCode = Me.Columns("IndCode")
            Me.columnMobile = Me.Columns("Mobile")
            Me.columnPAN = Me.Columns("PAN")
            Me.columnPart = Me.Columns("Part")
            Me.columnPhO = Me.Columns("PhO")
            Me.columnPhR = Me.Columns("PhR")
            Me.columnPin = Me.Columns("Pin")
            Me.columnSite = Me.Columns("Site")
            Me.columnTIN = Me.Columns("TIN")
            Me.columnUserID = Me.Columns("UserID")
        End Sub
        
        Private Sub InitClass()
            Me.columnAdd1 = New DataColumn("Add1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdd1)
            Me.columnAdd2 = New DataColumn("Add2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdd2)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnBkDate = New DataColumn("BkDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBkDate)
            Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCity)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnFax = New DataColumn("Fax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax)
            Me.columnGLcode = New DataColumn("GLcode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLcode)
            Me.columnGName = New DataColumn("GName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGName)
            Me.columnIndCode = New DataColumn("IndCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIndCode)
            Me.columnMobile = New DataColumn("Mobile", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMobile)
            Me.columnPAN = New DataColumn("PAN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAN)
            Me.columnPart = New DataColumn("Part", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPart)
            Me.columnPhO = New DataColumn("PhO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhO)
            Me.columnPhR = New DataColumn("PhR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhR)
            Me.columnPin = New DataColumn("Pin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPin)
            Me.columnSite = New DataColumn("Site", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSite)
            Me.columnTIN = New DataColumn("TIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTIN)
            Me.columnUserID = New DataColumn("UserID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGLcode}, true))
            Me.columnGLcode.AllowDBNull = false
            Me.columnGLcode.Unique = true
        End Sub
        
        Public Function NewGLMastRow() As GLMastRow
            Return CType(Me.NewRow,GLMastRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GLMastRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GLMastRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GLMastRowChangedEvent) Is Nothing) Then
                RaiseEvent GLMastRowChanged(Me, New GLMastRowChangeEvent(CType(e.Row,GLMastRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GLMastRowChangingEvent) Is Nothing) Then
                RaiseEvent GLMastRowChanging(Me, New GLMastRowChangeEvent(CType(e.Row,GLMastRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GLMastRowDeletedEvent) Is Nothing) Then
                RaiseEvent GLMastRowDeleted(Me, New GLMastRowChangeEvent(CType(e.Row,GLMastRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GLMastRowDeletingEvent) Is Nothing) Then
                RaiseEvent GLMastRowDeleting(Me, New GLMastRowChangeEvent(CType(e.Row,GLMastRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGLMastRow(ByVal row As GLMastRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GLMastRow
        Inherits DataRow
        
        Private tableGLMast As GLMastDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGLMast = CType(Me.Table,GLMastDataTable)
        End Sub
        
        Public Property Add1 As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.Add1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.Add1Column) = value
            End Set
        End Property
        
        Public Property Add2 As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.Add2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.Add2Column) = value
            End Set
        End Property
        
        Public Property Amount As Double
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.AmountColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.AmountColumn) = value
            End Set
        End Property
        
        Public Property BkDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.BkDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.BkDateColumn) = value
            End Set
        End Property
        
        Public Property City As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.CityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.CityColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.EmailColumn) = value
            End Set
        End Property
        
        Public Property Fax As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.FaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.FaxColumn) = value
            End Set
        End Property
        
        Public Property GLcode As Integer
            Get
                Return CType(Me(Me.tableGLMast.GLcodeColumn),Integer)
            End Get
            Set
                Me(Me.tableGLMast.GLcodeColumn) = value
            End Set
        End Property
        
        Public Property GName As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.GNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.GNameColumn) = value
            End Set
        End Property
        
        Public Property IndCode As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.IndCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.IndCodeColumn) = value
            End Set
        End Property
        
        Public Property Mobile As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.MobileColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.MobileColumn) = value
            End Set
        End Property
        
        Public Property PAN As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.PANColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.PANColumn) = value
            End Set
        End Property
        
        Public Property Part As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.PartColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.PartColumn) = value
            End Set
        End Property
        
        Public Property PhO As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.PhOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.PhOColumn) = value
            End Set
        End Property
        
        Public Property PhR As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.PhRColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.PhRColumn) = value
            End Set
        End Property
        
        Public Property Pin As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.PinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.PinColumn) = value
            End Set
        End Property
        
        Public Property Site As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.SiteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.SiteColumn) = value
            End Set
        End Property
        
        Public Property TIN As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.TINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.TINColumn) = value
            End Set
        End Property
        
        Public Property UserID As String
            Get
                Try 
                    Return CType(Me(Me.tableGLMast.UserIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGLMast.UserIDColumn) = value
            End Set
        End Property
        
        Public Function IsAdd1Null() As Boolean
            Return Me.IsNull(Me.tableGLMast.Add1Column)
        End Function
        
        Public Sub SetAdd1Null()
            Me(Me.tableGLMast.Add1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdd2Null() As Boolean
            Return Me.IsNull(Me.tableGLMast.Add2Column)
        End Function
        
        Public Sub SetAdd2Null()
            Me(Me.tableGLMast.Add2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableGLMast.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBkDateNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.BkDateColumn)
        End Function
        
        Public Sub SetBkDateNull()
            Me(Me.tableGLMast.BkDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tableGLMast.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tableGLMast.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.FaxColumn)
        End Function
        
        Public Sub SetFaxNull()
            Me(Me.tableGLMast.FaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGNameNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.GNameColumn)
        End Function
        
        Public Sub SetGNameNull()
            Me(Me.tableGLMast.GNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIndCodeNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.IndCodeColumn)
        End Function
        
        Public Sub SetIndCodeNull()
            Me(Me.tableGLMast.IndCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMobileNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.MobileColumn)
        End Function
        
        Public Sub SetMobileNull()
            Me(Me.tableGLMast.MobileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPANNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.PANColumn)
        End Function
        
        Public Sub SetPANNull()
            Me(Me.tableGLMast.PANColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.PartColumn)
        End Function
        
        Public Sub SetPartNull()
            Me(Me.tableGLMast.PartColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhONull() As Boolean
            Return Me.IsNull(Me.tableGLMast.PhOColumn)
        End Function
        
        Public Sub SetPhONull()
            Me(Me.tableGLMast.PhOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhRNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.PhRColumn)
        End Function
        
        Public Sub SetPhRNull()
            Me(Me.tableGLMast.PhRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPinNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.PinColumn)
        End Function
        
        Public Sub SetPinNull()
            Me(Me.tableGLMast.PinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSiteNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.SiteColumn)
        End Function
        
        Public Sub SetSiteNull()
            Me(Me.tableGLMast.SiteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTINNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.TINColumn)
        End Function
        
        Public Sub SetTINNull()
            Me(Me.tableGLMast.TINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserIDNull() As Boolean
            Return Me.IsNull(Me.tableGLMast.UserIDColumn)
        End Function
        
        Public Sub SetUserIDNull()
            Me(Me.tableGLMast.UserIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GLMastRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GLMastRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GLMastRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GLMastRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
