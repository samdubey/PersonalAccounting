'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class BsHead
    Inherits DataSet
    
    Private tableBSHead As BSHeadDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BSHead")) Is Nothing) Then
                Me.Tables.Add(New BSHeadDataTable(ds.Tables("BSHead")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BSHead As BSHeadDataTable
        Get
            Return Me.tableBSHead
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As BsHead = CType(MyBase.Clone,BsHead)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BSHead")) Is Nothing) Then
            Me.Tables.Add(New BSHeadDataTable(ds.Tables("BSHead")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBSHead = CType(Me.Tables("BSHead"),BSHeadDataTable)
        If (Not (Me.tableBSHead) Is Nothing) Then
            Me.tableBSHead.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "BsHead"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/BsHead.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBSHead = New BSHeadDataTable
        Me.Tables.Add(Me.tableBSHead)
    End Sub
    
    Private Function ShouldSerializeBSHead() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BSHeadRowChangeEventHandler(ByVal sender As Object, ByVal e As BSHeadRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BSHeadDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBkDate As DataColumn
        
        Private columnBsGroup As DataColumn
        
        Private columnBsType As DataColumn
        
        Private columnIndCode As DataColumn
        
        Private columnPart As DataColumn
        
        Private columnUCode As DataColumn
        
        Private columnUserID As DataColumn
        
        Friend Sub New()
            MyBase.New("BSHead")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BkDateColumn As DataColumn
            Get
                Return Me.columnBkDate
            End Get
        End Property
        
        Friend ReadOnly Property BsGroupColumn As DataColumn
            Get
                Return Me.columnBsGroup
            End Get
        End Property
        
        Friend ReadOnly Property BsTypeColumn As DataColumn
            Get
                Return Me.columnBsType
            End Get
        End Property
        
        Friend ReadOnly Property IndCodeColumn As DataColumn
            Get
                Return Me.columnIndCode
            End Get
        End Property
        
        Friend ReadOnly Property PartColumn As DataColumn
            Get
                Return Me.columnPart
            End Get
        End Property
        
        Friend ReadOnly Property UCodeColumn As DataColumn
            Get
                Return Me.columnUCode
            End Get
        End Property
        
        Friend ReadOnly Property UserIDColumn As DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BSHeadRow
            Get
                Return CType(Me.Rows(index),BSHeadRow)
            End Get
        End Property
        
        Public Event BSHeadRowChanged As BSHeadRowChangeEventHandler
        
        Public Event BSHeadRowChanging As BSHeadRowChangeEventHandler
        
        Public Event BSHeadRowDeleted As BSHeadRowChangeEventHandler
        
        Public Event BSHeadRowDeleting As BSHeadRowChangeEventHandler
        
        Public Overloads Sub AddBSHeadRow(ByVal row As BSHeadRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBSHeadRow(ByVal BkDate As Date, ByVal BsGroup As String, ByVal BsType As String, ByVal IndCode As String, ByVal Part As String, ByVal UCode As String, ByVal UserID As String) As BSHeadRow
            Dim rowBSHeadRow As BSHeadRow = CType(Me.NewRow,BSHeadRow)
            rowBSHeadRow.ItemArray = New Object() {BkDate, BsGroup, BsType, IndCode, Part, UCode, UserID}
            Me.Rows.Add(rowBSHeadRow)
            Return rowBSHeadRow
        End Function
        
        Public Function FindByIndCode(ByVal IndCode As String) As BSHeadRow
            Return CType(Me.Rows.Find(New Object() {IndCode}),BSHeadRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BSHeadDataTable = CType(MyBase.Clone,BSHeadDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BSHeadDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBkDate = Me.Columns("BkDate")
            Me.columnBsGroup = Me.Columns("BsGroup")
            Me.columnBsType = Me.Columns("BsType")
            Me.columnIndCode = Me.Columns("IndCode")
            Me.columnPart = Me.Columns("Part")
            Me.columnUCode = Me.Columns("UCode")
            Me.columnUserID = Me.Columns("UserID")
        End Sub
        
        Private Sub InitClass()
            Me.columnBkDate = New DataColumn("BkDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBkDate)
            Me.columnBsGroup = New DataColumn("BsGroup", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBsGroup)
            Me.columnBsType = New DataColumn("BsType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBsType)
            Me.columnIndCode = New DataColumn("IndCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIndCode)
            Me.columnPart = New DataColumn("Part", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPart)
            Me.columnUCode = New DataColumn("UCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUCode)
            Me.columnUserID = New DataColumn("UserID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIndCode}, true))
            Me.columnIndCode.AllowDBNull = false
            Me.columnIndCode.Unique = true
        End Sub
        
        Public Function NewBSHeadRow() As BSHeadRow
            Return CType(Me.NewRow,BSHeadRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BSHeadRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BSHeadRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BSHeadRowChangedEvent) Is Nothing) Then
                RaiseEvent BSHeadRowChanged(Me, New BSHeadRowChangeEvent(CType(e.Row,BSHeadRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BSHeadRowChangingEvent) Is Nothing) Then
                RaiseEvent BSHeadRowChanging(Me, New BSHeadRowChangeEvent(CType(e.Row,BSHeadRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BSHeadRowDeletedEvent) Is Nothing) Then
                RaiseEvent BSHeadRowDeleted(Me, New BSHeadRowChangeEvent(CType(e.Row,BSHeadRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BSHeadRowDeletingEvent) Is Nothing) Then
                RaiseEvent BSHeadRowDeleting(Me, New BSHeadRowChangeEvent(CType(e.Row,BSHeadRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBSHeadRow(ByVal row As BSHeadRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BSHeadRow
        Inherits DataRow
        
        Private tableBSHead As BSHeadDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBSHead = CType(Me.Table,BSHeadDataTable)
        End Sub
        
        Public Property BkDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableBSHead.BkDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBSHead.BkDateColumn) = value
            End Set
        End Property
        
        Public Property BsGroup As String
            Get
                Try 
                    Return CType(Me(Me.tableBSHead.BsGroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBSHead.BsGroupColumn) = value
            End Set
        End Property
        
        Public Property BsType As String
            Get
                Try 
                    Return CType(Me(Me.tableBSHead.BsTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBSHead.BsTypeColumn) = value
            End Set
        End Property
        
        Public Property IndCode As String
            Get
                Return CType(Me(Me.tableBSHead.IndCodeColumn),String)
            End Get
            Set
                Me(Me.tableBSHead.IndCodeColumn) = value
            End Set
        End Property
        
        Public Property Part As String
            Get
                Try 
                    Return CType(Me(Me.tableBSHead.PartColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBSHead.PartColumn) = value
            End Set
        End Property
        
        Public Property UCode As String
            Get
                Try 
                    Return CType(Me(Me.tableBSHead.UCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBSHead.UCodeColumn) = value
            End Set
        End Property
        
        Public Property UserID As String
            Get
                Try 
                    Return CType(Me(Me.tableBSHead.UserIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBSHead.UserIDColumn) = value
            End Set
        End Property
        
        Public Function IsBkDateNull() As Boolean
            Return Me.IsNull(Me.tableBSHead.BkDateColumn)
        End Function
        
        Public Sub SetBkDateNull()
            Me(Me.tableBSHead.BkDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBsGroupNull() As Boolean
            Return Me.IsNull(Me.tableBSHead.BsGroupColumn)
        End Function
        
        Public Sub SetBsGroupNull()
            Me(Me.tableBSHead.BsGroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBsTypeNull() As Boolean
            Return Me.IsNull(Me.tableBSHead.BsTypeColumn)
        End Function
        
        Public Sub SetBsTypeNull()
            Me(Me.tableBSHead.BsTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartNull() As Boolean
            Return Me.IsNull(Me.tableBSHead.PartColumn)
        End Function
        
        Public Sub SetPartNull()
            Me(Me.tableBSHead.PartColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUCodeNull() As Boolean
            Return Me.IsNull(Me.tableBSHead.UCodeColumn)
        End Function
        
        Public Sub SetUCodeNull()
            Me(Me.tableBSHead.UCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserIDNull() As Boolean
            Return Me.IsNull(Me.tableBSHead.UserIDColumn)
        End Function
        
        Public Sub SetUserIDNull()
            Me(Me.tableBSHead.UserIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BSHeadRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BSHeadRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BSHeadRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BSHeadRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
